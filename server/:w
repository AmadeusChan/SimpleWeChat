/* A simple server in the internet domain using TCP
   The port number is passed as an argument */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h> 
#include <sys/socket.h>
#include <netinet/in.h>

#include <time.h>

#include <algorithm>
#include <iostream>
#include <deque>
#include <thread>
#include <mutex>
#include <string>
#include <fstream>
#include <exception>

#include "json.hpp"

#define PORT 8888
#define BUFFER_SIZE 65536
#define MAX_FILE_PAC_LEN 16348
#define UPDATE_TIME 300000
#define MAX_SESSION 1000

using json = nlohmann::json;

class ClientSession;

std::string byte2Hex(unsigned char c_) {
	unsigned int hi = c_/16;
	unsigned int low = c_%16;
	std::string val = "";
	if (hi<10) val.push_back('0'+hi);
	else val.push_back('A'+hi-10);
	if (low<10) val.push_back('0'+low);
	else val.push_back('A'+low-10);
	//std::cout<<int(c_)<<":"<<int(hi)<<":"<<int(low)<<":"<<val<<std::endl;
	return val;
}

char hex2Byte(char s0, char s1) {
	char hi, low;
	if (s0>='0' && s0<='9') hi = s0-'0';
	else hi = s0-'A'+10;
	if (s1>='0' && s1<='9') low = s1-'0';
	else low = s1-'A'+10;
	return hi*16+low;
}

char hex2Byte(std::string s_) {
	char hi, low;
	if (s_[0]>='0' && s_[0]<='9') hi = s_[0]-'0';
	else hi = s_[0]-'A'+10;
	if (s_[1]>='0' && s_[1]<='9') low = s_[1]-'0';
	else low = s_[1]-'A'+10;
	return hi*16+low;
}

/*
std::string translateStr(std::string str_) {
	std::string val = "";
	std::cout<<str_<<std::endl;
	int len = str_.size();
	for (int i=0; i<len; ++i) {
		val = val + byte2Hex(str_[i]);
	}
	return val;
}
*/

std::string translateStr(char *str_, int len) {
	std::string val = "";
	//std::cout<<str_<<std::endl;
	for (int i=0; i<len; ++i) {
		val = val + byte2Hex(str_[i]);
	}
	//std::cout<<val<<std::endl;
	return val;
}

std::string inverseTranslate(std::string str_) {
	std::string val = "";
	int len = str_.size();
	for (int i=0; i<len; i+=2) {
		val.push_back(hex2Byte(str_.substr(i, 2)));
	}
	return val;
}

class MainControl {
	private:
		static std::deque<ClientSession*> sessions;
		static std::mutex sessMtx, pwdMtx, profileMtx, histMtx, fileMtx;
	public: 
		static void registerSession(ClientSession *sess) {
			sessMtx.lock();
			sessions.push_back(sess);
			sessMtx.unlock();
		}

		static bool registerUser(std::string name_, std::string pwd_) {
			pwdMtx.lock();

			std::ifstream f("users.json");
			json j;
			f>>j;
			f.close();

			int len = j.size();
			bool flag = true;
			std::string name, pwd;

			for (int i=0; i<len; ++i) {
				name = j[i][0];
				pwd = j[i][1];
				if (name.compare(name_) == 0) {
					flag = false;
					break;
				}
			}

			if (flag) {
				json k;
				k[0] = name_;
				k[1] = pwd_;
				j.push_back(k);
				std::ofstream of("users.json");
				of<<j;
				of.close();
			}

			pwdMtx.unlock();
			return flag;
		}

		static bool checkLogin(std::string name_, std::string pwd_) {
			bool flag = false;

			pwdMtx.lock();
			std::ifstream f("users.json");
			json j;
			f>>j;
			f.close();
			pwdMtx.unlock();

			int len = j.size();
			for (int i=0; i<len; ++i) {
				std::string name = j[i][0];
				std::string pwd = j[i][1];
				if (name.compare(name_) == 0 && pwd.compare(pwd_) == 0) {
					flag = true;
					break;
				}
			}

			return flag;
		}

		static std::string getAllUser() {
			pwdMtx.lock();
			std::ifstream fin("users.json");
			json j;
			fin>>j;
			fin.close();
			pwdMtx.unlock();

			int len = j.size();
			json users;
			for (int i=0; i<len; ++i) {
				users.push_back(j[i][0]);
			}
			std::cout<<users<<std::endl;

			json response;
			response["content"] = users;
			response["type"] = "get_all_users_ack";

			return response.dump();
		}

		static std::string getAllFriends(std::string name_) {
			profileMtx.lock();
			std::ifstream fin("profile.json");
			json j;
			fin>>j;
			fin.close();
			profileMtx.unlock();

			printf("getting all users\n");
			json response;
			response["content"] = j[name_]["friends"];
			response["type"] = "get_all_friends_ack";


			return response.dump();
		}

		static bool addFriends(std::string name_, std::string friend_) {
			bool flag = true;

			profileMtx.lock();
			std::ifstream fin("profile.json");
			json j;
			fin>>j;
			fin.close();
			profileMtx.unlock();

			try {
				json k = j[name_]["friends"];
				int len = k.size();
				for (int i=0; i<len; ++i) {
					std::string fri = k[i];
					if (fri.compare(friend_) == 0) {
						flag = false;
						break;
					}
				}
			} catch (std::exception e) {
				flag = false;
			}

			if (flag) {
				j[name_]["friends"].push_back(friend_);
				j[friend_]["friends"].push_back(name_);
				profileMtx.lock();
				std::ofstream fout("profile.json");
				fout<<j;
				fout.close();
				profileMtx.unlock();
			}

			return flag;
		}

		static void sendMessage(std::string sender_, std::string receiver_, std::string msg_) {
			histMtx.lock();

			std::ifstream fin("history.json");
			json j;
			fin>>j;
			fin.close();

			json record;
			record["sender"] = sender_;
			record["receiver"] = receiver_;
			record["msg"] = msg_;
			record["isRead"] = false;

			j[receiver_].push_back(record);
			
			json record_;
			record_["sender"] = sender_;
			record_["receiver"] = receiver_;
			record_["msg"] = msg_;
			record_["isRead"] = true;
			j[sender_].push_back(record_);

			std::ofstream fout("history.json");
			fout<<j;
			fout.close();

			histMtx.unlock();
		}

		static std::string getAllMessage(std::string name_, bool unreadOnly_) {
			json allMsg;

			histMtx.lock();
			std::ifstream fin("history.json");
			json j;
			fin>>j;
			fin.close();
			histMtx.unlock();

			int len = j[name_].size();
			for (int i=0; i<len; ++i) {
				if (unreadOnly_ == false || j[name_][i]["isRead"] == false) {
					allMsg.push_back(j[name_][i]);
				}
				j[name_][i]["isRead"] = true;
			}

			histMtx.lock();
			std::ofstream fout("history.json");
			fout<<j;
			fout.close();
			histMtx.unlock();

			json res;
			if (unreadOnly_) {
				res["type"] = "get_all_unread_msg_ack";
			} else {
				res["type"] = "get_all_msg_ack";
			}
			res["content"] = allMsg;

			return res.dump();
		}

		static json getRealTimeMessage(std::string name_, bool unreadOnly_) {
			json allMsg;

			histMtx.lock();
			std::ifstream fin("history.json");
			json j;
			fin>>j;
			fin.close();
			histMtx.unlock();

			int len = j[name_].size();
			for (int i=0; i<len; ++i) {
				if (unreadOnly_ == false || j[name_][i]["isRead"] == false) {
					allMsg.push_back(j[name_][i]);
				}
				j[name_][i]["isRead"] = true;
			}

			histMtx.lock();
			std::ofstream fout("history.json");
			fout<<j;
			fout.close();
			histMtx.unlock();

			json res;
			res["type"] = "realtime_msg";
			res["content"] = allMsg;

			return res;
		}

		static void sendFileRequest(std::string sender_, std::string receiver_, std::string fileName_) {
			fileMtx.lock();
			std::ifstream fin("files_list.json");
			json j;
			fin>>j;
			fin.close();
			json entry;
			entry["sender"] = sender_;
			entry["receiver"] = receiver_;
			entry["file"] = fileName_;
			entry["isReceived"] = false;
			j.push_back(entry);
			std::ofstream fout("file_list.json");
			fout<<j;
			fout.close();
			fileMtx.unlock();
		}

		static void getFilePacket(json j) {
			int num = j["num"];
			int maxNum = j["max_num"];
			std::string name = j["file_name"];
			std::string payload = j["payload"];
			std::string sender = j["sender"];
			std::string receiver = j["receiver"];
			std::ofstream fout;
			if (num) {
				fout.open(sender + "_to_" + receiver + "_" + name, std::ios_base::app);
			} else {
				fout.open(sender + "_to_" + receiver + "_" + name);
			}
			fout<<inverseTranslate(payload);
			fout.close();
			if (num == maxNum) {
				sendFileRequest(sender, receiver, name);
			}
		}

		static std::string getFilePacketPayload(int num, int max_num, std::string file_name_, std::string sender_, std::string receiver_) {
			std::string payload;
			std::string name = sender_ + "_to_" + receiver_ + "_" + file_name_;
			char buffer[MAX_FILE_PAC_LEN + 10];
			bzero(buffer, MAX_FILE_PAC_LEN + 10);
			int pos = MAX_FILE_PAC_LEN*num;

			std::ifstream fin(name, std::ifstream::binary);
			fin.seekg (0, fin.end);
			int len = fin.tellg();
			fin.seekg (pos);
			fin.read(buffer, MAX_FILE_PAC_LEN);
			fin.close();

			payload = translateStr(buffer, std::min(MAX_FILE_PAC_LEN, num<max_num?MAX_FILE_PAC_LEN:len-pos));
			
			return payload;
		}

		static std::string processReceiveFileRequest(json request) {
			json res;

			fileMtx.lock();
			std::ifstream fin("files_list.json");
			json j;
			fin>>j;
			fin.close();
			fileMtx.unlock();

			int len = j.size();
			bool flag = false;
			std::string receiver, sender, file, receiver_;
			receiver_ = request["receiver"];
			bool isReceived;
			for (int i=0; i<len; ++i) {
				receiver = j[i]["receiver"];
				isReceived = j[i]["isReceived"];
				printLog(receiver+":"+receiver_+":")
				if (receiver.compare(receiver_) == 0 && isReceived == false) {
					flag = true;
					//j[i]["isReceived"] = true;
					sender = j[i]["sender"];
					file = j[i]["file"];
				}
			}

			if (flag) {
				fileMtx.lock();
				std::ofstream fout("files_list.json");
				fout<<j;
				fout.close();
				fileMtx.unlock();

				int num, max_num;
				num = 0;
				std::ifstream in(sender + "_to_" + receiver + "_" + file, std::ifstream::binary);
				in.seekg (0, in.end);
				int file_len = in.tellg();
				in.close();
				max_num = file_len / MAX_FILE_PAC_LEN;
				if (file_len % MAX_FILE_PAC_LEN == 0) {
					max_num--;
				}

				res["type"] = "send_file";
				json content;
				content["num"] = 0;
				content["max_num"] = max_num;
				content["sender"] = sender;
				content["receiver"] = receiver;
				content["file_name"] = file;
				content["payload"] = getFilePacketPayload(num, max_num, file, sender, receiver);
				res["content"] = content;

			} else {
				res["type"] = "receive_file_request_nak";
			}

			return res.dump();
		}

};

std::deque<ClientSession*> MainControl::sessions;
std::mutex MainControl::sessMtx;
std::mutex MainControl::pwdMtx;
std::mutex MainControl::profileMtx; 
std::mutex MainControl::histMtx;
std::mutex MainControl::fileMtx;

class SessionEvent {

	public: 
		static const int READ_EVENT, WRITE_EVENT;

		SessionEvent(int type_, const char *content_, int size_) {
			type = type_;
			if (type_ == WRITE_EVENT) size = size_ + 1; else size = size_;
			content = new char[size_ + 2];
			memcpy(content, content_, size_);
			if (type_ == WRITE_EVENT) {
				content[size_] = ';';
				content[size_ + 1] = 0;
				printf("string to be sent: %s\n", content);
			}
		}

		int type;
		char *content;
		int size;

};

const int SessionEvent::READ_EVENT = 0;
const int SessionEvent::WRITE_EVENT = 1;

class ClientSession {
	private:
		int sockfd;
		int id;
		char temp[BUFFER_SIZE];
		char buffer[BUFFER_SIZE];
		bool isLogin;
		//char userName[BUFFER_SIZE];
		std::string userName;

		bool isKilled;
		std::deque<SessionEvent> *writeEvent;
		std::deque<SessionEvent> *readEvent;

		std::mutex *killedMtx, *writeEventMtx, *readEventMtx, *logMtx, *loginMtx, *userNameMtx;

		//std::mutex killedMtx, writeEventMtx, readEventMtx;
		
		void printLog(const char *msg) {
			logMtx->lock();
			printf("log from session %d: %s\n", id, msg);
			logMtx->unlock();
		}
	public:
		ClientSession(int sockfd_, int id_) {
			sockfd = sockfd_;
			id = id_;
			isLogin = false;
			writeEvent = new std::deque<SessionEvent>();
			readEvent = new std::deque<SessionEvent>();
			isKilled = false;
			userName[0] = 0;

			killedMtx = new std::mutex();
			writeEventMtx = new std::mutex();
			readEventMtx = new std::mutex();
			logMtx = new std::mutex();
			loginMtx = new std::mutex();
			userNameMtx = new std::mutex();

			printLog("constructing");
		}

		void terminate() {
			killedMtx->lock();
			isKilled = true;
			killedMtx->unlock();
		}

		bool getLogin() {
			//return true;
			bool flag;
			loginMtx->lock();
			flag = isLogin;
			loginMtx->unlock();
			return flag;
		}
		void setLogin(bool flag) {
			loginMtx->lock();
			isLogin = flag;
			loginMtx->unlock();
		}

		std::string getUserName() {
			userNameMtx->lock();
			std::string name = userName;
			userNameMtx->unlock();
			return name;
		}

		void setUserName(std::string name_) {
			userNameMtx->lock();
			userName = name_;
			userNameMtx->unlock();
		}

		void writeString(const char *content, int len) {
			writeEventMtx->lock();
			writeEvent->push_back(SessionEvent(SessionEvent::WRITE_EVENT, content, len));
			writeEventMtx->unlock();
		}

		void writeString(std::string str) {
			writeString(str.c_str(), str.size());
		}

		void saveReadString(char *content, int len) {
			printLog("saveReadString");
			readEventMtx->lock();
			readEvent->push_back(SessionEvent(SessionEvent::READ_EVENT, content, len));
			//std::cout<<readEvent->size()<<std::endl;
			readEventMtx->unlock();
		}

		/*
		char *splitBySpace(char *word) {
			int len = strlne(word);
			for (int i=0; i<len; ++i) {
				if 
			}
		}
		*/

		void processWord(char *word_, int len) {
			printLog("string received");
			/*
			for (int i=0; i<len; ++i) {
				putchar(word_[i]);
			}
			putchar('\n');
			*/
			word_[len] = 0;
			try {
				std::string word = std::string(word_);
				std::cout<<word<<std::endl;
				json j = json::parse(word);
				json content = j["content"];
				std::string type = j["type"];
				if (type.compare("register") == 0) {
					bool flag = MainControl::registerUser(content["name"], content["pwd"]);
					if (flag) {
						char response[20] = "{\"type\": \"reg_ack\"}";
						writeString(response, strlen(response));
					} else {
						char response[20] = "{\"type\": \"reg_nak\"}";
						writeString(response, strlen(response));
					}
				} else if (type.compare("login") == 0) {
					bool flag = MainControl::checkLogin(content["name"], content["pwd"]);
					if (flag) {
						char response[32] = "{\"type\": \"login_ack\"}";
						writeString(response, strlen(response));
						std::string name = content["name"];
						setUserName(name);
					} else {
						char response[32] = "{\"type\": \"login_nak\"}";
						writeString(response, strlen(response));
					}
					setLogin(flag);
				} else if (getLogin()) {
					if (type.compare("getAllUsers") == 0) {
						std::string users = MainControl::getAllUser();
						writeString(users.c_str(), users.size());
					} else if (type.compare("getAllFriends") == 0) {
						std::string friends = MainControl::getAllFriends(content["name"]);
						writeString(friends);
					} else if (type.compare("addFriend") == 0) {
						std::string name = content["name"];
						std::string fri = content["friend"];
						bool flag = MainControl::addFriends(name, fri);
						json response;
						if (flag) {
							response["type"] = "add_friend_ack";
						} else {
							response["type"] = "getUserName()nd_nak";
						}
						writeString(response.dump());
					} else if (type.compare("sendMessage") == 0) {
						std::string sender = content["sender"];
						std::string receiver = content["receiver"];
						std::string msg = content["msg"];
						MainControl::sendMessage(sender, receiver, msg);
					} else if (type.compare("getAllMessage") == 0) {
						std::string name = content["name"];
						bool unreadOnly = content["unreadOnly"];
						writeString(MainControl::getAllMessage(name, unreadOnly));
					} else if (type.compare("logout") == 0) {
						setLogin(false);
					} else if (type.compare("sendFile") == 0) {
						MainControl::getFilePacket(j["content"]);
						int num = j["content"]["num"];
						json res;
						res["type"] = "send_file_ack";
						res["num"] = num;
						res["max_num"] = j["content"]["max_num"];
						res["id"] = j["content"]["id"];
						res["sender"] = j["content"]["sender"];
						res["receiver"] = j["content"]["receiver"];
						res["file_name"] = j["content"]["file_name"];
						writeString(res.dump());
					} else if (type.compare("receive_file_request") == 0) {
						std::string res = MainControl::processReceiveFileRequest(j["content"]);
						writeString(res);
					} else if (type.compare("receive_file_ack") == 0) {
					}
				}
			} catch (std::exception& e) {
				printLog("not valid msg");
			}
		}

		void startReading() {
			// `: esc
			// ;: flag
			printLog("reading from client");
			int tempCnt = 0;
			bzero(temp, BUFFER_SIZE);
			bool isEsc = false;
			char flag = ';';
			char esc = '`';
			while (1) {
				killedMtx->lock();
				if (isKilled) {
					killedMtx->unlock();
					break;
				}
				killedMtx->unlock();

				bzero(buffer, BUFFER_SIZE);
				int n = read(sockfd, buffer, BUFFER_SIZE);
				if (n < 0) {
					printLog("ERROR reading from socket");
					break;
				}
				for (int i=0; i<n; ++i) {
					//printf("%c", buffer[i]);
					if ((buffer[i] != flag && buffer[i] != esc) || isEsc) {
						isEsc = false;
						temp[tempCnt++] = buffer[i];
					} else {
						if (buffer[i] == flag) {
							//processWord(temp, tempCnt);
							for (int ii=0; ii<tempCnt; ++ii) {
								putchar(temp[ii]);
							}
							putchar('\n');
							saveReadString(temp, tempCnt);
							//writeString(temp, tempCnt);
							tempCnt = 0;
							bzero(temp, BUFFER_SIZE);
						} else {
							isEsc = true;
						}
					}
				}
			}
		} 
		void start() { // main loop fun
			printLog("start main loop");
			//int udpTimer = clock();
			try {
				while (1) {
					//printLog("sleep.");
					std::this_thread::sleep_for(std::chrono::milliseconds(rand()%100));
					//printLog("wake up.");
					//std::cout<<"timer: "<<udpTimer<<std::endl;
					/*
					std::cout<<"writing"<<std::endl;
					std::this_thread::sleep_for(std::chrono::milliseconds(3000));
					*/
					killedMtx->lock();
					if (isKilled) {
						killedMtx->unlock();
						break;
					}
					killedMtx->unlock();

					if (getLogin()) {
						//udpTimer = clock();
						json res = MainControl::getRealTimeMessage(getUserName(), true);
						/*
						json fake;
						fake["sender"] = "god";
						fake["receiver"] = "god";
						fake["msg"] = "msg";
						json fake_list;
						fake_list.push_back(fake);
						res["content"] = fake_list;
						*/
						if (res["content"].size()>0) {
							printLog("updating realtime message");
							writeString(res.dump());
						}
						//MainControl::getRealTimeMessage(getUserName(), true);
					}

					writeEventMtx->lock();
					if (writeEvent->size()>0) { // do some writing stuff
						SessionEvent event = writeEvent->front();
						writeEvent->pop_front();
						int n = write(sockfd, event.content, event.size);
						delete[] event.content;
						if (n < 0) {
							printLog("error when writing to socket!");
							terminate();
						}
						writeEventMtx->unlock();
					} else {
						writeEventMtx->unlock();
					}

					readEventMtx->lock();
					//std::cout<<readEvent->size()<<std::endl;
					//std::this_thread::sleep_for(std::chrono::milliseconds(rand()%10000));
					if (readEvent->size()>0) { // process the read string
						//printLog("processing saved string");
						SessionEvent event = readEvent->front();
						;readEvent->pop_front();
						processWord(event.content, event.size);
						delete[] event.content;
						readEventMtx->unlock();
					} else {
						//printLog("no saved string");
						readEventMtx->unlock();
					}
				}
			} catch (std::exception e) {
				printLog("exception!");
			}
			terminate();
		}
};


class NetworkManager {
	private:
		static int port;
		static char buffer[BUFFER_SIZE];
		static std::thread *read_thread[MAX_SESSION];
		static std::thread *write_thread[MAX_SESSION];
		static int sessionCnt;

		static void error(const char *msg) {
		    perror(msg);
		    exit(1);
		}

	public:
		static void init() {
			sessionCnt = 0;
			port = PORT;
			int sockfd, newsockfd;
			socklen_t clilen;
			struct sockaddr_in serv_addr, cli_addr;
			sockfd = socket(AF_INET, SOCK_STREAM, 0);
			if (sockfd < 0) {
				error("ERROR opening socket");
				return ;
			}
			bzero((char *) &serv_addr, sizeof(serv_addr));
			serv_addr.sin_family = AF_INET;
			serv_addr.sin_addr.s_addr = INADDR_ANY;
			serv_addr.sin_port = htons(port);
			if (bind(sockfd, (struct sockaddr *) &serv_addr, sizeof(serv_addr)) < 0) {
				error("ERROR on binding");
				return ;
			}
			listen(sockfd,5);
			clilen = sizeof(cli_addr);
			int sessCnt = 0;
			while (1) {
				std::this_thread::sleep_for(std::chrono::milliseconds(rand()%100));
				printf("waiting for new connection...\n");
				newsockfd = accept(sockfd, (struct sockaddr *) &cli_addr, &clilen);
				if (newsockfd < 0) {
					error("ERROR on accept");
					return ;
				}
				ClientSession *sess = new ClientSession(newsockfd, sessCnt++);
				std::thread *sessThread = new std::thread();
				*sessThread = std::thread(&ClientSession::startReading, *sess);
				read_thread[sessionCnt] = sessThread;
				sessThread = new std::thread();
				*sessThread = std::thread(&ClientSession::start, *sess);
				write_thread[sessionCnt++] = sessThread;
			}
			//readFromNewSocket(newsockfd);
			/*
			bzero(buffer,256);
			n = read(newsockfd,buffer,255);
			if (n < 0) {
				error("ERROR reading from socket");
				return ;
			}
			printf("Here is the message: %s\n",buffer);
			n = write(newsockfd,"I got your message",18);
			if (n < 0) {
				error("ERROR writing to socket");
				return ;
			}
			close(newsockfd);
			*/
			close(sockfd);
		}
};

int NetworkManager:: port;
char NetworkManager:: buffer[BUFFER_SIZE];
std::thread* NetworkManager::read_thread[MAX_SESSION];
std::thread* NetworkManager::write_thread[MAX_SESSION];
int NetworkManager::sessionCnt;

int main() {
	NetworkManager::init();
	return 0;
}
